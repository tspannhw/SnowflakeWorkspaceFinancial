select * from transcom order by ts desc, pubdate desc;

truncate table TRANSIT_RIDERSHIP;

select TRANSIT_TIMESTAMP, KAFKA_TIMESTAMP, TRANSIT_MODE,
       STATION_COMPLEX, BOROUGH, payment_method, fare_class_category, ridership, 
       transfers, latitude, longitude
From TRANSIT_RIDERSHIP 
order by kafka_timestamp desc, transit_timestamp desc;

select count(*) from TRANSIT_RIDERSHIP;

-- 503,000

select * from NYCTRAFFICSTATIONS;


create or replace TABLE DEMO.DEMO.TRANSIT_RIDERSHIP (
	TRANSIT_TIMESTAMP STRING,
	TRANSIT_MODE VARCHAR(50),
	STATION_COMPLEX_ID VARCHAR(10),
	STATION_COMPLEX VARCHAR(200),
	BOROUGH VARCHAR(50),
	PAYMENT_METHOD VARCHAR(50),
	FARE_CLASS_CATEGORY VARCHAR(100),
	RIDERSHIP FLOAT,
	TRANSFERS FLOAT,
	LATITUDE FLOAT,
	LONGITUDE FLOAT,
	KAFKA_TIMESTAMP STRING,
	RAW_JSON STRING
);


select count(*) from TRANSIT_RIDERSHIP;

SELECT DISTINCT STATION_COMPLEX FROM DEMO.DEMO.TRANSIT_RIDERSHIP ORDER BY STATION_COMPLEX;

select * From TRANSIT_RIDERSHIP order by transit_timestamp desc;

describe table TRANSIT_RIDERSHIP;

CREATE OR REPLACE TABLE DEMO.DEMO.TRANSIT_ALERTS (
    title STRING,
    description STRING,
    link STRING,
    guid STRING,
    advisoryAlert STRING,
    pubDate STRING,
    alert_message_components STRING,
    ts BIGINT,
    companyname STRING,
    uuid STRING,
    servicename STRING,
    raw_json STRING,
    created_at STRING
);




SELECT sv.date, COUNT(sv.estimatedpassengercount::INTEGER) as total_passengers
FROM SEMANTIC_VIEW(
    DEMO.DEMO.MTA
    DIMENSIONS mtabusvehiclemonitoring.date, 
              mtabusvehiclemonitoring.estimatedpassengercount,
              mtabusvehiclemonitoring.vehiclelocationlatitude,
              mtabusvehiclemonitoring.vehiclelocationlongitude
    WHERE vehiclelocationlatitude::FLOAT BETWEEN 40.70 AND 40.88
    AND vehiclelocationlongitude::FLOAT BETWEEN -74.03 AND -73.91
) AS sv 
WHERE sv.estimatedpassengercount is not null
GROUP BY sv.date
ORDER BY sv.date;


SELECT sv.date, COUNT(sv.estimatedpassengercount::INTEGER) as total_passengers
FROM SEMANTIC_VIEW(
    DEMO.DEMO.MTA
    DIMENSIONS mtabusvehiclemonitoring.date, 
              mtabusvehiclemonitoring.estimatedpassengercount,
              mtabusvehiclemonitoring.vehiclelocationlatitude,
              mtabusvehiclemonitoring.vehiclelocationlongitude
    WHERE vehiclelocationlatitude::FLOAT BETWEEN 40.70 AND 40.88
    AND vehiclelocationlongitude::FLOAT BETWEEN -74.03 AND -73.91
    AND mtabusvehiclemonitoring.estimatedpassengercount is not null
    and trim(mtabusvehiclemonitoring.estimatedpassengercount) != ''
) AS sv 
where estimatedpassengercount is not null
GROUP BY sv.date
ORDER BY sv.date;

alter table DEMO.DEMO.MTABUSVEHICLEMONITORING
  add column  ESTIMATEDPASSENGERCOUNTN NUMBER;



select * from DEMO.DEMO.MTABUSVEHICLEMONITORING;

create or replace TABLE DEMO.DEMO.MTABUSVEHICLEMONITORING (
	STOPPOINTREF STRING,
	VEHICLEREF STRING,
	PROGRESSRATE STRING,
	EXPECTEDDEPARTURETIME STRING,
	STOPPOINT STRING,
	VISITNUMBER STRING,
	DATAFRAMEREF STRING,
	STOPPOINTNAME STRING,
	SITUATIONSIMPLEREF5 STRING,
	SITUATIONSIMPLEREF3 STRING,
	BEARING STRING,
	SITUATIONSIMPLEREF4 STRING,
	SITUATIONSIMPLEREF1 STRING,
	ORIGINAIMEDDEPARTURETIME STRING,
	SITUATIONSIMPLEREF2 STRING,
	JOURNEYPATTERNREF STRING,
	RECORDEDATTIME STRING,
	OPERATORREF STRING,
	DESTINATIONNAME STRING,
	EXPECTEDARRIVALTIME STRING,
	BLOCKREF STRING,
	LINEREF STRING,
	VEHICLELOCATIONLONGITUDE STRING WITH TAG (SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='LONGITUDE'),
	DIRECTIONREF STRING,
	ARRIVALPROXIMITYTEXT STRING,
	DISTANCEFROMSTOP STRING,
	ESTIMATEDPASSENGERCAPACITY STRING,
	AIMEDARRIVALTIME STRING,
	PUBLISHEDLINENAME STRING,
	DATEDVEHICLEJOURNEYREF STRING,
	DATE STRING,
	MONITORED STRING,
	PROGRESSSTATUS STRING,
	DESTINATIONREF STRING,
	ESTIMATEDPASSENGERCOUNT STRING,
	VEHICLELOCATIONLATITUDE STRING WITH TAG (SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='LATITUDE'),
	ORIGINREF STRING,
	NUMBEROFSTOPSAWAY STRING,
	TS STRING,
	UUID STRING
);


SELECT COUNT(*) as incident_count
FROM SEMANTIC_VIEW(
    DEMO.DEMO.TRANSPORTATIONCOM
    DIMENSIONS transcom.pubdate
    WHERE transcom.pubdate >= '2025-06-01 00:00:00'
    AND transcom.pubdate <= '2025-06-30 23:59:59'
) AS sv
 -- Generated by Cortex Analyst
;

   SELECT IMAGE_TEXT
        FROM Demo.Demo.NYCTRAFFICIMAGES
         WHERE IMAGE_TEXT ILIKE '%traffic%' ORDER BY 1 LIMIT 10;

select * from MTABUSVEHICLEMONITORING;

select * from MTABUSVEHICLEMONITORING;

describe table subwaynyc;

select * from subwaynyc;

describe table NYCTRAFFIC;

select * from nyctraffic;


  "division" : "BMT",
  "line" : "4th Av",
  "borough" : "B",
  "stop_name" : "Atlantic Av-Barclays Ctr",
  "complex_id" : "617",
  "constituent_station_name" : "Atlantic Av-Barclays Ctr",
  "station_id" : "27",
  "gtfs_stop_id" : "R31",
  "daytime_routes" : "2 3 4 5 B D N Q R",
  "entrance_type" : "Stair",
  "entry_allowed" : "YES",
  "exit_allowed" : "YES",
  "entrance_latitude" : "40.683905",
  "entrance_longitude" : "-73.978879",
  "entrance_georeference" : {
    "type" : "Point",
    "coordinates" : [ -73.978879, 40.683905 ]
  },
;


describe table WEATHER_OBSERVATIONS;


CREATE
 
OR
 
REPLACE
 
TABLE
 WEATHER_OBSERVATIONS 
(

    
-- Metadata Fields

    id NUMBER AUTOINCREMENT 
START
 
1
 INCREMENT 
1
,

    version 
FLOAT
,

    credit 
VARCHAR
(
100
)
,

    credit_url 
VARCHAR
(
255
)
,

    
-- Image Related Fields

    image_url 
VARCHAR
(
255
)
,

    image_title 
VARCHAR
(
255
)
,

    image_link 
VARCHAR
(
255
)
,

    
-- Station Information

    station_id 
VARCHAR
(
10
)
,

    location 
VARCHAR
(
255
)
,

    latitude 
FLOAT
,

    longitude 
FLOAT
,

    
-- Timing Fields

    suggested_pickup 
VARCHAR
(
100
)
,

    suggested_pickup_period 
INTEGER
,

    observation_time 
VARCHAR
(
255
)
,

    observation_time_rfc822 
VARCHAR
(
255
)
,

    
-- Weather Measurements

    weather 
VARCHAR
(
100
)
,

    temperature_string 
VARCHAR
(
50
)
,

    temp_f 
FLOAT
,

    temp_c 
FLOAT
,

    relative_humidity 
INTEGER
,

    wind_string 
VARCHAR
(
100
)
,

    wind_dir 
VARCHAR
(
50
)
,

    wind_degrees 
INTEGER
,

    wind_mph 
FLOAT
,

    wind_kt 
INTEGER
,

    pressure_in 
FLOAT
,

    dewpoint_string 
VARCHAR
(
50
)
,

    dewpoint_f 
FLOAT
,

    dewpoint_c 
FLOAT
,

    visibility_mi 
FLOAT
,

    
-- URL References

    icon_url_base 
VARCHAR
(
255
)
,

    two_day_history_url 
VARCHAR
(
255
)
,

    icon_url_name 
VARCHAR
(
100
)
,

    ob_url 
VARCHAR
(
255
)
,

    disclaimer_url 
VARCHAR
(
255
)
,

    copyright_url 
VARCHAR
(
255
)
,

    privacy_policy_url 
VARCHAR
(
255
)
,

    
-- Audit Fields

    created_at TIMESTAMP_NTZ 
DEFAULT
 
CURRENT_TIMESTAMP
(
)
,

    updated_at TIMESTAMP_NTZ 
DEFAULT
 
CURRENT_TIMESTAMP
(
)
,

    
PRIMARY
 
KEY
 
(
id
)

)

COMMENT
 
=
 
'Weather observation data from NOAA National Weather Service'
;

-- Add column comments

COMMENT
 
ON
 
COLUMN
 WEATHER_OBSERVATIONS
.
station_id 
IS
 
'Weather station identifier'
;

COMMENT
 
ON
 
COLUMN
 WEATHER_OBSERVATIONS
.
latitude 
IS
 
'Station latitude in decimal degrees'
;

COMMENT
 
ON
 
COLUMN
 WEATHER_OBSERVATIONS
.
longitude 
IS
 
'Station longitude in decimal degrees'
;

COMMENT
 
ON
 
COLUMN
 WEATHER_OBSERVATIONS
.
temp_f 
IS
 
'Temperature in Fahrenheit'
;

COMMENT
 
ON
 
COLUMN
 WEATHER_OBSERVATIONS
.
temp_c 
IS
 
'Temperature in Celsius'
;

COMMENT
 
ON
 
COLUMN
 WEATHER_OBSERVATIONS
.
relative_humidity 
IS
 
'Relative humidity percentage'
;

COMMENT
 
ON
 
COLUMN
 WEATHER_OBSERVATIONS
.
wind_mph 
IS
 
'Wind speed in miles per hour'
;

COMMENT
 
ON
 
COLUMN
 WEATHER_OBSERVATIONS
.
wind_kt 
IS
 
'Wind speed in knots'
;

COMMENT
 
ON
 
COLUMN
 WEATHER_OBSERVATIONS
.
pressure_in 
IS
 
'Barometric pressure in inches'
;

COMMENT
 
ON
 
COLUMN
 WEATHER_OBSERVATIONS
.
visibility_mi 
IS
 
'Visibility in miles'
;


CREATE OR REPLACE TABLE DEMO.DEMO.BIKESTATIONSTATUS (
station_id STRING,
uuid STRING ,
legacy_id STRING,
num_ebikes_available INTEGER,
num_bikes_available INTEGER,
num_scooters_available INTEGER,
num_scooters_unavailable INTEGER,
num_bikes_disabled INTEGER,
num_docks_available INTEGER,
num_docks_disabled INTEGER,
is_installed BOOLEAN,
is_renting BOOLEAN,
is_returning BOOLEAN,
eightd_has_available_keys BOOLEAN,
last_reported TIMESTAMP_NTZ,
ts TIMESTAMP_NTZ,
PRIMARY KEY (station_id)
);


